<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer height="23" dataChange.normal="mxtreeitemrenderer1_dataChangeHandler(event)" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.estudio.flex.utils.Convert;

			import mx.collections.ArrayCollection;
			import mx.controls.Tree;
			import mx.events.FlexEvent;

			[Bindable]
			public var ownerDocument:Object="";

			private var isRootNode:Boolean=false;

			protected function mxtreeitemrenderer1_dataChangeHandler(event:FlexEvent):void
			{
			/*
			var tree : Tree = this.owner as Tree;
			var currentIsRootNode : Boolean = (tree.dataProvider as ArrayCollection).getItemAt(0) == data;
			if (isRootNode != currentIsRootNode)
			{
				isRootNode = currentIsRootNode;
				labelField.setStyle("fontWeight" , isRootNode ? "bold" : "normal");
			}
			*/
			}

			/////////////////////////////////////////////////////////////////////////////////////
			//复选框被选择
			private function checkBoxClick(event:MouseEvent):void
			{
				RecursiveSetCheckBox(data, checkBox.selected);
				(this.owner as Tree).invalidateList();
				if (checkboxClickFun != null)
					checkboxClickFun(data);
			}

			private function RecursiveSetCheckBox(data:Object, isSelected:Boolean):void
			{
				data.selected=isSelected;
				if (data.children)
				{
					for (var i:int=0; i < data.children.length; i++)
						RecursiveSetCheckBox(data.children[i], isSelected);
				}
			}

			//////////////////////////////////////////////////////////////////////////////////////////////
			//判断鼠标是否在CheckBox上点击
			public function isMouseOnCheckBox(x:int, y:int):Boolean
			{
				if (!includeCheckBox)
					return false;

				var rect:Rectangle=checkBoxGroup.getRect(this);
				return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
			}

			[Bindable]
			public var includeCheckBox:Boolean=false;

			[Bindable]
			public var checkboxClickFun:Function=null;
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" verticalAlign="middle" gap="2">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}"/>
		</s:Group>
		<s:Group id="checkBoxGroup" width="{includeCheckBox?16:0}" visible="{includeCheckBox}">
			<s:CheckBox id="checkBox" selected="{data.selected}" verticalCenter="0" horizontalCenter="0" doubleClickEnabled="false" click="checkBoxClick(event)">
			</s:CheckBox>
		</s:Group>
		<s:Image source="{data.iconURL}"/>
		<s:Label id="labelField" paddingTop="2" verticalCenter="0" text="{treeListData.label}"/>
	</s:HGroup>
</s:MXTreeItemRenderer>
