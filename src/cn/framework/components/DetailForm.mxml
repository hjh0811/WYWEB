<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" showCloseButton="true" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  close="PopUpManager.removePopUp(this)"  title="" minWidth="300" minHeight="200" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:esri="http://www.esri.com/2008/ags" xmlns:utils="cn.framework.utils.*">
	<fx:Metadata>
		[Event(name="Reflash",type="events.CustomEvent")] 
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import cn.framework.FrameContainer;
			import cn.framework.utils.BindingUtil;
			
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;
			
			import spark.skins.spark.TitleWindowSkin;

			private var bindingUtil:BindingUtil = new BindingUtil;
			[Bindable]
			public var bindingObj:Object;
			public var m_Model:String = "new";  //new or edit
			private var _configXML:XML;
			public var m_formXML:XML;
			
			[Bindable]
			private var isUserMap:Boolean = true;
			private var _infoData:Object;
			
			public function set infoData(value:Object):void
			{
				this._infoData = value;
				var layerXML:XML = _infoData.layerXML;
				var formXML:String = layerXML.@formXML;
				bindingObj = _infoData.attributes;
				
				var httpservice:HTTPService = new HTTPService;
				httpservice.url = formXML;
				httpservice.resultFormat = "e4x";
				httpservice.addEventListener(ResultEvent.RESULT, resultHandler);
				httpservice.addEventListener(FaultEvent.FAULT, faultHandler)
				httpservice.send(null);
			}
			
			
			private function resultHandler(event:ResultEvent):void
			{
				if(event.result==null || event.result=="") return; 
				
				m_formXML = event.result as XML;
				createForm();
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.message.toString());
			}
			
			//生成表单界面 以及绑定数据
			private function createForm():void
			{
				if(this.m_formXML!=null)
				{
					this.container.width = this.m_formXML.form.@width;
					this.container.height = this.m_formXML.form.@height;
					
					this.isUserMap = this.m_formXML.form.@useMap == "true"? true: false;
					
					var s:Namespace = new Namespace("library://ns.adobe.com/flex/spark");
					var mx:Namespace = new Namespace("library://ns.adobe.com/flex/mx");
					var labelList:XMLList = m_formXML.form.s::Label;
					
					for each(var labelXML:XML in labelList)
					{
						var labelControl:spark.components.Label = new spark.components.Label;
						labelControl.text = labelXML.@text;
						labelControl.x = labelXML.@x;
						labelControl.y = labelXML.@y;
						if(labelXML.@width!=null && String(labelXML.@width) != "")
							labelControl.width = labelXML.@width;
						if(labelXML.@height!=null && String(labelXML.@height)!="")
							labelControl.height = labelXML.@height;
						labelControl.name = labelXML.@text;
						this.container.addElement(labelControl);
					}
					
					var texInputList:XMLList = m_formXML.form.s::TextInput;
					for each(var texInputXML:XML in texInputList)
					{
						var texInputControl:spark.components.TextInput = new spark.components.TextInput;
						texInputControl.x = texInputXML.@x;
						texInputControl.y = texInputXML.@y;
						texInputControl.name = texInputXML.@text;
						texInputControl.width = texInputXML.@width;
						var enableStr:String = texInputXML.@enabled;
						texInputControl.enabled = enableStr != null &&  enableStr == "false" ? false:true;
						this.container.addElement(texInputControl);
						
						var displayAsPassword:String = texInputXML.@displayAsPassword;
						texInputControl.displayAsPassword = displayAsPassword != null &&  displayAsPassword == "true" ? true:false;
						var bindProp:String = texInputXML.@text;
						texInputControl.text = bindingObj[bindProp];  //控件赋值
						this.bindingUtil.bind(texInputControl,"text",bindingObj,bindProp); //双向绑定
					}
					
					var textList:XMLList = m_formXML.form.mx::TextInput;
					for each(var textXML:XML in textList)
					{
						var text_mx_Control:mx.controls.TextInput = new mx.controls.TextInput;
						text_mx_Control.x = textXML.@x;
						text_mx_Control.y = textXML.@y;
						text_mx_Control.name = textXML.@text;
						text_mx_Control.width = textXML.@width;
						var enable:String = textXML.@enabled;
						text_mx_Control.enabled = enable != null &&  enable == "false" ? false:true;
						this.container.addElement(text_mx_Control);
						
						var prop:String = texInputXML.@text;
						text_mx_Control.text = bindingObj[prop];  //控件赋值
						this.bindingUtil.bind(text_mx_Control,"text",bindingObj,prop); //双向绑定
					}
					
					
					var textAreaList:XMLList = m_formXML.form.s::TextArea;
					for each(var textAreaXML:XML in textAreaList)
					{
						var textAreaControl:spark.components.TextArea = new spark.components.TextArea;
						textAreaControl.x = textAreaXML.@x;
						textAreaControl.y = textAreaXML.@y;
						textAreaControl.width = textAreaXML.@width;
						textAreaControl.height = textAreaXML.@height;
						textAreaControl.name = textAreaXML.@text;
						textAreaControl.enabled = textAreaXML.@enabled != null? textAreaXML.@enabled:true;
						this.container.addElement(textAreaControl);
						
						var Prop:String = textAreaXML.@text;
						textAreaControl.text = bindingObj[Prop];  //控件赋值
						this.bindingUtil.bind(textAreaControl,"text",bindingObj,Prop);  //双向绑定
					}
				}
			    PopUpManager.centerPopUp(this);
			}

		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
	<s:HGroup width="100%" height="100%" horizontalAlign="center">
		<s:BorderContainer borderStyle="inset" height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Group id="container" height="100%">
				
			</s:Group>
		</s:BorderContainer>
	</s:HGroup>
	</s:VGroup>
</mx:TitleWindow>
