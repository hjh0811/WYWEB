<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" showCloseButton="true" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  close="PopUpManager.removePopUp(this)"  title="" minWidth="300" minHeight="200" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:esri="http://www.esri.com/2008/ags" xmlns:utils="cn.framework.utils.*">
	<fx:Metadata>
		[Event(name="Reflash",type="events.CustomEvent")] 
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import cn.framework.FrameContainer;
			import cn.framework.utils.BindingUtil;
			
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;

			private var bindingUtil:BindingUtil = new BindingUtil;
			[Bindable]
			public var bindingObj:Object;
			public var m_Model:String = "new";  //new or edit
			private var _configXML:XML;
			public var m_formXML:XML;
			
			[Bindable]
			private var isUserMap:Boolean = true;
			
			public function getFormData(objectID:String, configXML:XML):void
			{
				this._configXML = configXML;
				if(this._configXML!=null)
					this.title = this._configXML.@label;
				
				if(m_Model == "edit" || m_Model == "new")
				{
					var params:Object = {t:configXML.@select, id:objectID};
					FrameContainer.getInstance().serviceManager.getDataByService(params,dataHandler,"POST");
				}
//				else if(m_Model == "new")
//				{
//					this.bindingObj = {};
//					createForm();
//				}
			}
			
			private function dataHandler(event:ResultEvent):void
			{
				if(event.result==null || event.result=="") return; 
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object; 
				if(jsonObject==null) return; 	
				
				var jsonValues:Array =  jsonObject["values"];
				var jsonColumns:Array =  jsonObject["columns"];
				
				if(m_Model == "edit")
				{
					if(jsonValues!=null)
					{
						bindingObj = jsonValues[0];
						createForm();
					}
				}
				else if(m_Model == "new")  
				{
					if(jsonColumns!=null)
					{
						//新建空对象
						bindingObj = {};
						for each(var field:String in jsonColumns)
						{
							bindingObj[field] = null;
						}
						createForm();
					}
				}
				
			}
			
			//生成表单界面 以及绑定数据
			private function createForm():void
			{
				if(this.m_formXML!=null)
				{
					this.container.width = this.m_formXML.form.@width;
//					this.container.height = this.m_formXML.form.@height;
					
					this.isUserMap = this.m_formXML.form.@useMap == "true"? true: false;
					
					var s:Namespace = new Namespace("library://ns.adobe.com/flex/spark");
					var mx:Namespace = new Namespace("library://ns.adobe.com/flex/mx");
					var labelList:XMLList = m_formXML.form.s::Label;
					
					for each(var labelXML:XML in labelList)
					{
						var labelControl:spark.components.Label = new spark.components.Label;
						labelControl.text = labelXML.@text;
						labelControl.x = labelXML.@x;
						labelControl.y = labelXML.@y;
						if(labelXML.@width!=null && String(labelXML.@width) != "")
							labelControl.width = labelXML.@width;
						if(labelXML.@height!=null && String(labelXML.@height)!="")
							labelControl.height = labelXML.@height;
						labelControl.name = labelXML.@text;
						this.container.addElement(labelControl);
					}
					
					var texInputList:XMLList = m_formXML.form.s::TextInput;
					for each(var texInputXML:XML in texInputList)
					{
						var texInputControl:spark.components.TextInput = new spark.components.TextInput;
						texInputControl.x = texInputXML.@x;
						texInputControl.y = texInputXML.@y;
						texInputControl.name = texInputXML.@text;
						texInputControl.width = texInputXML.@width;
						var enableStr:String = texInputXML.@enabled;
						texInputControl.enabled = enableStr != null &&  enableStr == "false" ? false:true;
						this.container.addElement(texInputControl);
						
						var displayAsPassword:String = texInputXML.@displayAsPassword;
						texInputControl.displayAsPassword = displayAsPassword != null &&  displayAsPassword == "true" ? true:false;
						var bindProp:String = texInputXML.@text;
						texInputControl.text = bindingObj[bindProp];  //控件赋值
						this.bindingUtil.bind(texInputControl,"text",bindingObj,bindProp); //双向绑定
					}
					
					var textList:XMLList = m_formXML.form.mx::TextInput;
					for each(var textXML:XML in textList)
					{
						var text_mx_Control:mx.controls.TextInput = new mx.controls.TextInput;
						text_mx_Control.x = textXML.@x;
						text_mx_Control.y = textXML.@y;
						text_mx_Control.name = textXML.@text;
						text_mx_Control.width = textXML.@width;
						var enable:String = textXML.@enabled;
						text_mx_Control.enabled = enable != null &&  enable == "false" ? false:true;
						this.container.addElement(text_mx_Control);
						
						var prop:String = texInputXML.@text;
						text_mx_Control.text = bindingObj[prop];  //控件赋值
						this.bindingUtil.bind(text_mx_Control,"text",bindingObj,prop); //双向绑定
					}
					
					
					var textAreaList:XMLList = m_formXML.form.s::TextArea;
					for each(var textAreaXML:XML in textAreaList)
					{
						var textAreaControl:spark.components.TextArea = new spark.components.TextArea;
						textAreaControl.x = textAreaXML.@x;
						textAreaControl.y = textAreaXML.@y;
						textAreaControl.width = textAreaXML.@width;
						textAreaControl.height = textAreaXML.@height;
						textAreaControl.name = textAreaXML.@text;
						textAreaControl.enabled = textAreaXML.@enabled != null? textAreaXML.@enabled:true;
						this.container.addElement(textAreaControl);
						
						var Prop:String = textAreaXML.@text;
						textAreaControl.text = bindingObj[Prop];  //控件赋值
						this.bindingUtil.bind(textAreaControl,"text",bindingObj,Prop);  //双向绑定
					}
					
					if(bindingObj.x !=null && bindingObj.y!=null && bindingObj.x!="" && bindingObj.y!="")
					{
						var pt:MapPoint = new MapPoint(bindingObj.x,bindingObj.y);
						var graphic:Graphic = new Graphic;
						graphic.geometry = pt;
						graphic.symbol = new PictureMarkerSymbol("assets/images/pin.png",36,36,0,13);
						graphicslayer.add(graphic);
						
						this.map.centerAt(pt);
					}
				}
			}
			
			private function save():void
			{
//				Alert.show(this.bindingObj.name);
				var params:Object = ObjectUtil.clone(bindingObj);
				if(m_Model == "new")
				{
					params.t = this._configXML.@insert;
				}
				else if(m_Model == "edit")
				{
					params.t = this._configXML.@update;
				}
				FrameContainer.getInstance().serviceManager.getDataByService(params, saveDataHandler, "POST");
			}
			
			private function saveDataHandler(event:ResultEvent):void
			{
				Alert.show("保存成功");
				this.dispatchEvent(new Event("Reflash"));
			}

			protected function drawEndHandler(event:DrawEvent):void
			{
				// TODO Auto-generated method stub
				this.graphicslayer.clear();
				var gra:Graphic = event.graphic;
				gra.symbol = new PictureMarkerSymbol("assets/images/pin.png",36,36,0,13); 
				graphicslayer.add(gra);
				bindingObj.x = (gra.geometry as MapPoint).x.toFixed(6);
				bindingObj.y = (gra.geometry as MapPoint).y.toFixed(6)
				
				drawTool.deactivate();
				drawButton.selected = false;
				
				//更新坐标显示
				if(container.getChildByName("x")!=null && container.getChildByName("x")!=null)
				{
					if(container.getChildByName("x") is spark.components.TextInput)
					{
						var x_spart:spark.components.TextInput = container.getChildByName("x") as spark.components.TextInput;
						x_spart.text = bindingObj.x;
					}
					else if(container.getChildByName("x") is mx.controls.TextInput)
					{
						var x_mx:mx.controls.TextInput = container.getChildByName("x") as mx.controls.TextInput;
						x_mx.text = bindingObj.x;
					}
						
					if(container.getChildByName("y") is spark.components.TextInput)
					{
						var y_spart:spark.components.TextInput = container.getChildByName("y") as spark.components.TextInput;
						y_spart.text = bindingObj.y;
					}
					else if(container.getChildByName("y") is mx.controls.TextInput)
					{
						var y_mx:mx.controls.TextInput = container.getChildByName("y") as mx.controls.TextInput;
						y_mx.text = bindingObj.y;
					}
				}
			}


			protected function draw(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var toggleButton:ToggleButton = event.currentTarget as ToggleButton;
				if(toggleButton.selected)
				{
					drawTool.activate(DrawTool.MAPPOINT);
				}
				else
				{
					drawTool.deactivate();
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<esri:DrawTool id="drawTool" map="{this.map}" drawEnd="drawEndHandler(event)" showDrawTips="true" snapMode="alwaysOn"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
	<s:HGroup width="100%" height="100%" horizontalAlign="center">
		<s:BorderContainer borderStyle="inset" height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Group id="container" height="100%">
				
			</s:Group>
		</s:BorderContainer>
		<s:BorderContainer visible="{this.isUserMap}" includeInLayout="{this.isUserMap}" borderStyle="inset"  width="450" height="100%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<esri:Map id="map" width="100%" height="100%" logoVisible="false" zoomSliderVisible="false">
				<utils:WMTSLayer id="dt" baseUrl="http://218.15.41.59:8719/wmts/sg_gz_map/Default/epsg:4610/" visible="true"/>
				<esri:GraphicsLayer id="graphicslayer"/>
			</esri:Map>
			<mx:HBox width="100%" backgroundColor="0xffffff" visible="false" horizontalGap="2" backgroundAlpha="1" paddingLeft="2" paddingBottom="2" paddingTop="2" paddingRight="2">
				<mx:TextInput width="100%"/>
				<mx:Button label="搜索"/>
			</mx:HBox>
			
			<s:ToggleButton id="drawButton" icon="@Embed('assets/images/pin.png')" right="5" bottom="5" width="38"  height="36" toolTip="在地图上标注位置" click="draw(event)"/>
		</s:BorderContainer>
	</s:HGroup>
		<s:HGroup width="100%" paddingBottom="5" paddingTop="3" paddingRight="50" horizontalAlign="right" gap="20">
			<mx:Button label="保存" click="save()" width="60" height="25" />
			<mx:Button label="关闭" click="PopUpManager.removePopUp(this);" width="60" height="25"/>
		</s:HGroup>
	</s:VGroup>
</mx:TitleWindow>
